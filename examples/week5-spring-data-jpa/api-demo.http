### Week 5: Spring Data JPA API Demo
### IntelliJ IDEA HTTP Client

### Variables
@baseUrl = http://localhost:8080
@contentType = application/json

### ==============================================
### USER ENDPOINTS
### ==============================================

### Create a User
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "username": "john_doe",
  "email": "john@example.com"
}

### Create another User
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "username": "jane_smith",
  "email": "jane@example.com"
}

### Get all Users
GET {{baseUrl}}/api/users

### Get User by ID
GET {{baseUrl}}/api/users/1

### Get User with Tasks (JOIN FETCH)
GET {{baseUrl}}/api/users/1/with-tasks

### Get User by Username
GET {{baseUrl}}/api/users/username/john_doe

### Update User
PUT {{baseUrl}}/api/users/1
Content-Type: {{contentType}}

{
  "username": "john_doe_updated",
  "email": "john.updated@example.com"
}

### Delete User
DELETE {{baseUrl}}/api/users/2

### ==============================================
### TASK ENDPOINTS
### ==============================================

### Create a Task (standalone)
POST {{baseUrl}}/api/tasks
Content-Type: {{contentType}}

{
  "title": "Buy groceries",
  "description": "Milk, bread, eggs",
  "completed": false
}

### Create a Task for User
POST {{baseUrl}}/api/tasks/user/1
Content-Type: {{contentType}}

{
  "title": "Complete assignment",
  "description": "Finish the Spring Data JPA assignment",
  "completed": false
}

### Create another Task for User
POST {{baseUrl}}/api/tasks/user/1
Content-Type: {{contentType}}

{
  "title": "Read documentation",
  "description": "Study Spring Data JPA docs",
  "completed": true
}

### Get all Tasks
GET {{baseUrl}}/api/tasks

### Get Task by ID
GET {{baseUrl}}/api/tasks/1

### Get Tasks by User ID
GET {{baseUrl}}/api/tasks/user/1

### Get Tasks by Username
GET {{baseUrl}}/api/tasks/username/john_doe

### Get Completed Tasks
GET {{baseUrl}}/api/tasks/completed

### Get Incomplete Tasks
GET {{baseUrl}}/api/tasks/incomplete

### Get Incomplete Tasks by User ID
GET {{baseUrl}}/api/tasks/user/1/incomplete

### Search Tasks by Keyword
GET {{baseUrl}}/api/tasks/search?keyword=assignment

### Get Recent Tasks (last 7 days)
GET {{baseUrl}}/api/tasks/recent

### Get Recent Tasks (last 30 days)
GET {{baseUrl}}/api/tasks/recent?days=30

### Update Task
PUT {{baseUrl}}/api/tasks/1
Content-Type: {{contentType}}

{
  "title": "Buy groceries - UPDATED",
  "description": "Milk, bread, eggs, cheese",
  "completed": false
}

### Mark Task as Complete
PATCH {{baseUrl}}/api/tasks/2/complete

### Delete Task
DELETE {{baseUrl}}/api/tasks/3

### ==============================================
### STATISTICS ENDPOINTS
### ==============================================

### Count Completed Tasks
GET {{baseUrl}}/api/tasks/stats/completed-count

### Count Tasks by User ID
GET {{baseUrl}}/api/tasks/stats/user/1/count

### ==============================================
### ERROR SCENARIOS (for testing)
### ==============================================

### Get Non-existent User (should return 404)
GET {{baseUrl}}/api/users/999

### Get Non-existent Task (should return 404)
GET {{baseUrl}}/api/tasks/999

### Create Task with Empty Title (should return 400)
POST {{baseUrl}}/api/tasks
Content-Type: {{contentType}}

{
  "title": "",
  "description": "This should fail",
  "completed": false
}

### Create Task for Non-existent User (should return 400)
POST {{baseUrl}}/api/tasks/user/999
Content-Type: {{contentType}}

{
  "title": "This should fail",
  "description": "User doesn't exist",
  "completed": false
}

### ==============================================
### DEMO WORKFLOW
### ==============================================

### Step 1: Create User
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "username": "demo_user",
  "email": "demo@example.com"
}

### Step 2: Create Tasks for Demo User (use ID from Step 1)
POST {{baseUrl}}/api/tasks/user/1
Content-Type: {{contentType}}

{
  "title": "Task 1: Learn Spring Data JPA",
  "description": "Understand entities and repositories",
  "completed": true
}

###
POST {{baseUrl}}/api/tasks/user/1
Content-Type: {{contentType}}

{
  "title": "Task 2: Build REST API",
  "description": "Create controllers and services",
  "completed": false
}

###
POST {{baseUrl}}/api/tasks/user/1
Content-Type: {{contentType}}

{
  "title": "Task 3: Write Tests",
  "description": "Use @DataJpaTest",
  "completed": false
}

### Step 3: Get All Tasks for User
GET {{baseUrl}}/api/tasks/user/1

### Step 4: Search Tasks
GET {{baseUrl}}/api/tasks/search?keyword=spring

### Step 5: Get User with All Tasks (JOIN FETCH)
GET {{baseUrl}}/api/users/1/with-tasks

### Step 6: Mark Task as Complete
PATCH {{baseUrl}}/api/tasks/2/complete

### Step 7: Get Statistics
GET {{baseUrl}}/api/tasks/stats/completed-count

###
GET {{baseUrl}}/api/tasks/stats/user/1/count